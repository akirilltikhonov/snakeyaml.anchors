package snakeyaml.anchors.handler;

import static snakeyaml.anchors.common.YamlRepresenter.RESOURCES_ANCHOR_YAML_PROPERTY;
import static snakeyaml.anchors.common.YamlRepresenter.TARGET_BRANCH_ANCHOR_YAML_PROPERTY;

import java.util.Optional;

import lombok.RequiredArgsConstructor;
import snakeyaml.anchors.common.YamlUtils;
import snakeyaml.anchors.domain.Project;
import snakeyaml.anchors.domain.Root;


@RequiredArgsConstructor
public class RootHandler
{

    private final AnchorsService anchorsService;

    public Optional<String> addProjectToRoot(String projectName)
    {
        final Root root = RootYamlParser.getRoot().orElseThrow();
        final Project projectToAdd = Project.builder()
            .name(projectName)
            .targetBranch(root.getDefaultTargetBranch())
            .resources(root.getDefaultResources())
            .build();
        root.getProjects().add(projectToAdd);

        String updatedFileContent = YamlUtils.getYamlParser().dumpAsMap(root);

        // snakeYaml automatically generates names for anchors which are not meaningful
        // so here these generic names are replaced with the actual property names
        updatedFileContent = anchorsService.replaceAnchorNames(updatedFileContent, RESOURCES_ANCHOR_YAML_PROPERTY);
        // this line replaces anchors randomly generated by snakeyaml to default-targetBranch, but snakeyaml replaced all anchors to value "master" already
        updatedFileContent = anchorsService.replaceAnchorNames(updatedFileContent, TARGET_BRANCH_ANCHOR_YAML_PROPERTY);
        return Optional.of(updatedFileContent);
    }
}
